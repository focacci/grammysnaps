name: Deploy to Staging

on:
  push:
    branches: [main]
    paths:
      - "api/**"
      - "web/**"
      - ".github/workflows/deploy.yml"

env:
  AWS_REGION: us-east-2
  PROJECT_NAME: grammysnaps
  ENVIRONMENT: staging

jobs:
  test-api:
    name: Test API
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_grammysnaps
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"
          cache-dependency-path: api/package-lock.json

      - name: Install API dependencies
        working-directory: ./api
        run: npm ci

      - name: Run API linter
        working-directory: ./api
        run: npm run lint

      - name: Run API tests
        working-directory: ./api
        run: npm run test:ci
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_grammysnaps
          JWT_SECRET: test-jwt-secret
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          S3_BUCKET_NAME: test-bucket

  test-web:
    name: Test Web
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install web dependencies
        working-directory: ./web
        run: npm ci

      - name: Run web linter
        working-directory: ./web
        run: npm run lint

      - name: Build web application
        working-directory: ./web
        run: npm run build
        env:
          VITE_API_URL: https://grammysnaps-alb-1397736712.us-east-2.elb.amazonaws.com/api

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-api, test-web]
    if: github.ref == 'refs/heads/main'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get commit hash
        id: commit
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push API image
        working-directory: ./api
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-api
          IMAGE_TAG: ${{ steps.commit.outputs.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build and push Web image
        working-directory: ./web
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-web
          IMAGE_TAG: ${{ steps.commit.outputs.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update API ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.PROJECT_NAME }}-cluster \
            --service ${{ env.PROJECT_NAME }}-api \
            --force-new-deployment

      - name: Update Web ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.PROJECT_NAME }}-cluster \
            --service ${{ env.PROJECT_NAME }}-web \
            --force-new-deployment

      - name: Wait for API service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.PROJECT_NAME }}-cluster \
            --services ${{ env.PROJECT_NAME }}-api

      - name: Wait for Web service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.PROJECT_NAME }}-cluster \
            --services ${{ env.PROJECT_NAME }}-web
