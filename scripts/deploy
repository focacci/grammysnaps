#!/bin/bash

# Production/Staging Deployment Script
# Usage: ./scripts/deploy -e <environment> -b <branch>

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display usage
usage() {
    echo "Usage: $0 -e <environment> -b <branch>"
    echo ""
    echo "Required arguments:"
    echo "  -e, --environment    staging (us-east-2) or production (us-east-1)"
    echo "  -b, --branch        branch to checkout before deploying"
    echo ""
    echo "Examples:"
    echo "  $0 -e staging -b main"
    echo "  $0 -e production -b RELEASE-v1.2.0"
    echo ""
    echo "Notes:"
    echo "  - Production releases require branch name starting with 'RELEASE-'"
    echo "  - Deployment will fail if there are unstaged changes"
    exit 1
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -e|--environment)
            ENVIRONMENT="$2"
            shift 2
            ;;
        -b|--branch)
            BRANCH="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo -e "${RED}Error: Unknown argument $1${NC}"
            usage
            ;;
    esac
done

# Validate required arguments
if [[ -z "$ENVIRONMENT" || -z "$BRANCH" ]]; then
    echo -e "${RED}Error: Both environment and branch are required${NC}"
    usage
fi

# Validate environment
if [[ "$ENVIRONMENT" != "staging" && "$ENVIRONMENT" != "production" ]]; then
    echo -e "${RED}Error: Environment must be 'staging' or 'production'${NC}"
    usage
fi

# Validate production branch naming
if [[ "$ENVIRONMENT" == "production" && ! "$BRANCH" =~ ^RELEASE- ]]; then
    echo -e "${RED}Error: Production deployments require a branch starting with 'RELEASE-'${NC}"
    echo -e "${YELLOW}Example: RELEASE-v1.2.0${NC}"
    exit 1
fi

# Set environment-specific variables
if [[ "$ENVIRONMENT" == "production" ]]; then
    AWS_REGION="us-east-1"
    ECR_REGISTRY="124314579010.dkr.ecr.us-east-1.amazonaws.com"
    CLUSTER_NAME="grammysnaps-prod-cluster"
    SERVICE_PREFIX="grammysnaps-prod"
    DOMAIN="grannysnaps.com"
else
    AWS_REGION="us-east-2"
    ECR_REGISTRY="124314579010.dkr.ecr.us-east-2.amazonaws.com"
    CLUSTER_NAME="grammysnaps-cluster"
    SERVICE_PREFIX="grammysnaps"
    DOMAIN="grammysnaps-alb-1397736712.us-east-2.elb.amazonaws.com"
fi

PROJECT_NAME="grammysnaps"

echo -e "${BLUE}üöÄ Starting $ENVIRONMENT deployment from branch: $BRANCH${NC}"
echo -e "${BLUE}üìç Region: $AWS_REGION${NC}"
echo -e "${BLUE}üéØ Cluster: $CLUSTER_NAME${NC}"
echo ""

# Check for unstaged changes
echo -e "${YELLOW}üîç Checking for unstaged changes...${NC}"
if [[ -n $(git status --porcelain) ]]; then
    echo -e "${RED}‚ùå Deployment failed: You have unstaged changes${NC}"
    echo -e "${YELLOW}Please commit or stash your changes before deploying:${NC}"
    echo ""
    echo -e "${BLUE}Git Status:${NC}"
    git status
    echo ""
    echo -e "${YELLOW}To fix this, run one of:${NC}"
    echo -e "${CYAN}  git add . && git commit -m \"Your commit message\"${NC}"
    echo -e "${CYAN}  git stash${NC}"
    echo ""
    exit 1
fi
echo -e "${GREEN}‚úÖ No unstaged changes${NC}"

# Fetch latest changes and checkout branch
echo -e "${YELLOW}üì° Fetching latest changes...${NC}"
git fetch origin

echo -e "${YELLOW}üîÑ Checking out branch: $BRANCH${NC}"
if ! git checkout "$BRANCH"; then
    echo -e "${RED}‚ùå Error: Failed to checkout branch $BRANCH${NC}"
    exit 1
fi

# Pull latest changes for the branch
echo -e "${YELLOW}‚¨áÔ∏è Pulling latest changes for $BRANCH...${NC}"
git pull origin "$BRANCH"

# Get commit hash for tagging
COMMIT_HASH=$(git rev-parse --short HEAD)
echo -e "${BLUE}üìù Deploying commit: $COMMIT_HASH${NC}"

# Check AWS credentials
echo -e "${YELLOW}‚òÅÔ∏è Verifying AWS credentials...${NC}"
if ! aws sts get-caller-identity --region "$AWS_REGION" >/dev/null; then
    echo -e "${RED}‚ùå Error: AWS credentials not configured or invalid${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ AWS credentials verified${NC}"

# Login to ECR
echo -e "${YELLOW}üîê Logging into ECR...${NC}"
aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"

# Build and push API image
echo -e "${YELLOW}üê≥ Building API Docker image...${NC}"
cd api
docker build -t "$ECR_REGISTRY/$SERVICE_PREFIX-api:$COMMIT_HASH" .
docker tag "$ECR_REGISTRY/$SERVICE_PREFIX-api:$COMMIT_HASH" "$ECR_REGISTRY/$SERVICE_PREFIX-api:latest"

echo -e "${YELLOW}üì§ Pushing API image to ECR...${NC}"
docker push "$ECR_REGISTRY/$SERVICE_PREFIX-api:$COMMIT_HASH"
docker push "$ECR_REGISTRY/$SERVICE_PREFIX-api:latest"
cd ..

# Build and push Web image
echo -e "${YELLOW}üåê Building Web Docker image...${NC}"
cd web
docker build -t "$ECR_REGISTRY/$SERVICE_PREFIX-web:$COMMIT_HASH" .
docker tag "$ECR_REGISTRY/$SERVICE_PREFIX-web:$COMMIT_HASH" "$ECR_REGISTRY/$SERVICE_PREFIX-web:latest"

echo -e "${YELLOW}üì§ Pushing Web image to ECR...${NC}"
docker push "$ECR_REGISTRY/$SERVICE_PREFIX-web:$COMMIT_HASH"
docker push "$ECR_REGISTRY/$SERVICE_PREFIX-web:latest"
cd ..

# Update ECS services
echo -e "${YELLOW}üîÑ Updating API ECS service...${NC}"
aws ecs update-service \
    --cluster "$CLUSTER_NAME" \
    --service "$SERVICE_PREFIX-api" \
    --force-new-deployment \
    --region "$AWS_REGION"

echo -e "${YELLOW}üîÑ Updating Web ECS service...${NC}"
aws ecs update-service \
    --cluster "$CLUSTER_NAME" \
    --service "$SERVICE_PREFIX-web" \
    --force-new-deployment \
    --region "$AWS_REGION"

echo ""
echo -e "${GREEN}üéâ Deployment initiated successfully!${NC}"
echo -e "${BLUE}üìä Environment: $ENVIRONMENT${NC}"
echo -e "${BLUE}üåç Region: $AWS_REGION${NC}"
echo -e "${BLUE}üìù Commit: $COMMIT_HASH${NC}"
echo -e "${BLUE}üåê URL: https://$DOMAIN${NC}"
echo ""
echo -e "${YELLOW}üìà Monitor deployment progress with:${NC}"
echo -e "${BLUE}   ./scripts/deployment-status $ENVIRONMENT${NC}"
echo ""
